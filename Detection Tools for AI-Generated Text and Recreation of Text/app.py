import streamlit as st
import torch
from transformers import GPT2Tokenizer, GPT2LMHeadModel

# Set the page configuration
st.set_page_config(page_title="Text Perplexity Prediction")

# Load fine-tuned model and tokenizer
model_path = 'fine_tuned_gpt2'
tokenizer = GPT2Tokenizer.from_pretrained(model_path)
model = GPT2LMHeadModel.from_pretrained(model_path)

def tokenize_input(text):
    inputs = tokenizer.encode(text, return_tensors="pt")
    return inputs

def calculate_perplexity(text):
    inputs = tokenize_input(text)
    with torch.no_grad():
        outputs = model(inputs, labels=inputs)
        loss = outputs.loss
        perplexity = torch.exp(loss)
        return perplexity.item()

def is_generated_by_gpt(text, threshold=50):
    perplexity = calculate_perplexity(text)
    return perplexity < threshold

# Streamlit UI
st.title("DETECTION TOOLS FOR AI-GENERATED TEXT ")
st.image("coverpage.png")
st.write("Enter a text to evaluate whether it is likely generated by GPT or NOT")

text = st.text_area("Text to be evaluated", "")
threshold=50

# Add detailed description
st.markdown("""
### About This Tool

This tool leverages a fine-tuned GPT-2 model to determine the perplexity of a given text. Perplexity is a measurement of how well a probability distribution or probability model predicts a sample. In the context of language models like GPT-2, lower perplexity indicates that the text is more likely to have been generated by the model.

### How It Works

1. **Input Text**: You enter the text you want to evaluate.
2. **Tokenization**: The text is tokenized using the GPT-2 tokenizer.
3. **Perplexity Calculation**: The model calculates the perplexity of the tokenized text.
4. **Evaluation**: The tool compares the perplexity against a threshold (default: 50). If the perplexity is below the threshold, the text is likely generated by GPT-2.

### Why Use This Tool?

- **Detection of AI-generated text**: Identify whether a piece of text was generated by GPT-2 or written by a human.
- **Research and Analysis**: Useful for researchers studying natural language generation and AI-generated content.
- **Content Verification**: Helps in verifying the authenticity of text in various applications, including academic, journalistic, and creative writing.

### More About AI Text Recognition

AI text recognition involves using machine learning models to analyze and understand text data. These models can be trained to recognize patterns and generate predictions about the origins and characteristics of the text.

#### Applications of AI Text Recognition:

1. **Plagiarism Detection**: Ensuring the originality of academic and professional content.
2. **Fake News Detection**: Identifying and flagging potentially misleading or false information in news articles and social media.
3. **Content Moderation**: Automating the process of reviewing and filtering inappropriate or harmful content on online platforms.
4. **Natural Language Processing (NLP)**: Enhancing applications like chatbots, virtual assistants, and translation services by understanding and generating human-like text.
5. **Sentiment Analysis**: Analyzing the sentiment expressed in reviews, social media posts, and other text data to gather insights and feedback.

#### How This Tool Can Be Beneficial:

- **Academic Institutions**: To detect and prevent plagiarism in student submissions.
- **Media Organizations**: To verify the authenticity of articles and avoid the spread of fake news.
- **Businesses**: For moderating user-generated content on their platforms and ensuring compliance with guidelines.
- **Developers and Researchers**: As a part of their toolkit for developing and refining NLP models and applications.

""")

# Evaluation logic
if st.button("Evaluate"):
    if text:
        result = is_generated_by_gpt(text, threshold)
        if result:
            st.markdown("<span style='color: red; font-size: 24px;'>This text is likely generated by GPT.</span>", unsafe_allow_html=True)
        else:
            st.markdown("<span style='color: green; font-size: 24px;'>This text is likely human-generated.</span>", unsafe_allow_html=True)
    else:
        st.write("Please enter some text to evaluate.")


# Add HTML footer
st.markdown("""
    <style>
    .footer {
        position: fixed;
        left: 0;
        bottom: 0;
        width: 100%;
        background-color: #f1f1f1;
        color: black;
        text-align: center;
        padding: 10px;
    }
    </style>
    <div class="footer">
        <p>Â© 2024 DETECTION TOOLS FOR AI-GENERATED TEXT. All rights reserved.</p>
    </div>
    """, unsafe_allow_html=True)
